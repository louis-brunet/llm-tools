name: Create release
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-**

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      app-version-suffix: ${{ steps.get-version.outputs.app-version-suffix }}
      release-tag-name: ${{ steps.get-tag-name.outputs.release-tag-name }}
      is-prerelease: ${{ steps.get-tag-name.outputs.is-prerelease  }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get release tag name
        if: github.event_name == 'push'
        id: get-tag-name
        run: |
          tag_name='${{ github.ref_name == github.event.repository.default_branch && 'next' || github.ref_name }}'

          is_prerelease=
          prerelease_version_tag_pattern='^(next|v[0-9]+\.[0-9]+\.[0-9]+-.*)$'
          if [[ "$tag_name" =~ $prerelease_version_tag_pattern ]]; then
            is_prerelease=true
          fi

          echo "release-tag-name=$tag_name" >> $GITHUB_OUTPUT
          echo "is-prerelease=$is_prerelease" >> $GITHUB_OUTPUT
      - name: Get app version
        id: get-version
        run: |
          ref_name='${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}'
          if [[ "${{ steps.get-tag-name.outputs.is-prerelease }}" = true ]]; then
            app_version_suffix=${{ github.ref_name == github.event.repository.default_branch && 'dev-$(git rev-parse --short "$GITHUB_SHA")' || '' }}
            if [[ -z "$app_version_suffix" ]]; then
              app_version_suffix=$(
                echo "$ref_name" \
                | sed -E 's/^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+-//'
              )
            fi
          fi

          app_version=$(
            echo "$ref_name" \
            | grep --only-matching -E '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+'
          ) || true
          app_version="${app_version:-$(jq -r '.version' packages/apps/cli/package.json)}"

          echo "app-version-suffix=$app_version_suffix" >> $GITHUB_OUTPUT
          echo "app-version=$app_version" >> $GITHUB_OUTPUT

          echo '[DEBUG] output:'
          cat $GITHUB_OUTPUT

  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22.14']
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test
        with:
          node-version: ${{ matrix.node-version }}
          workspace-from: 'packages/apps/*'

  build_zsh_plugin:
    name: Build zsh plugin
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - working-directory: examples/zsh
        run: tar -czvf zsh-plugin.tgz llm-tools
      - uses: actions/upload-artifact@v4
        with:
          name: zsh-plugin-release-asset
          path: examples/zsh/zsh-plugin.tgz
          if-no-files-found: error
          retention-days: 1

  build_cli:
    name: Build CLI
    needs:
      - test
      - setup
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install
      - name: Build CLI bundle
        env:
          LLM_TOOLS_BUILD_APP_VERSION: '${{ needs.setup.outputs.app-version }}'
          LLM_TOOLS_BUILD_APP_VERSION_SUFFIX: '${{ needs.setup.outputs.app-version-suffix }}'
        run: yarn run build:cli
      - name: Upload CLI bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-release-asset
          path: packages/apps/cli/build/bundle.js
          if-no-files-found: error
          retention-days: 1

  # SOURCE: https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  build_and_push_image:
    name: Publish docker image
    runs-on: ubuntu-latest
    needs:
      - setup
      - test
      - build_cli
    #   - build_zsh_plugin
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-cli
      DOCKERFILE: ./docker/cli.Dockerfile
      PUSH_TO_REGISTRY: ${{ github.event_name == 'push' && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get build arguments
        id: build-arguments
        run: |
          {
            echo 'build-args<<EOF'
            echo 'LLM_TOOLS_BUILD_APP_VERSION=${{ needs.setup.outputs.app-version }}'
            echo 'LLM_TOOLS_BUILD_APP_VERSION_SUFFIX=${{ needs.setup.outputs.app-version-suffix }}'
            echo "OCI_REVISION=${{ github.sha }}"
            echo "OCI_CREATED=$(date --iso-8601=seconds)"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: ${{ env.PUSH_TO_REGISTRY }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ steps.build-arguments.outputs.build-args }}
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: ${{ env.PUSH_TO_REGISTRY }}

  publish_release:
    name: Publish release
    if: github.event_name == 'push'
    needs:
      - setup
      - build_cli
      - build_zsh_plugin
      - build_and_push_image
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: '*-release-asset'
          merge-multiple: true
      - name: Rename artifacts
        run: |
          mv release-assets/bundle.js release-assets/cli.js
      - name: Get tag name
        run: |
          echo "TAG_NAME=${{ needs.setup.outputs.release-tag-name }}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'next'
        name: Delete 'next' prerelease
        run: |
          gh release delete "$TAG_NAME" --yes || true
      - if: env.TAG_NAME == 'next'
        name: Update git tag 'next'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.TAG_NAME }}',
              sha: context.sha
            }).catch(err => {
              if (err.status !== 422) throw err;
              github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ env.TAG_NAME }}',
                sha: context.sha
              });
            })
      - name: Create release
        env:
          PRERELEASE: "${{ needs.setup.outputs.is-prerelease && '--prerelease' || '' }}"
        run: |
          release_tag="${TAG_NAME:-$(git rev-parse --short "$GITHUB_SHA")}"
          release_target="$GITHUB_SHA"
          release_title="llm-tools CLI - $TAG_NAME"
          if [[ -n "$PRERELEASE" ]]; then
            release_title="${release_title} (prerelease)"
          fi
          # NOTE: see https://cli.github.com/manual/gh_release_create
          gh release create \
            "$release_tag" \
            $PRERELEASE \
            --target "$release_target" \
            --title "$release_title" \
            release-assets/*
