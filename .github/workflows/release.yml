name: Create release
on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-**

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22.14']
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test
        with:
          node-version: ${{ matrix.node-version }}
          workspace-from: 'packages/apps/*'

  build_zsh_plugin:
    name: Build zsh plugin
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - working-directory: examples/zsh
        run: tar -czvf zsh-plugin.tgz llm-tools
      - uses: actions/upload-artifact@v4
        with:
          name: zsh-plugin-release-asset
          path: examples/zsh/zsh-plugin.tgz
          if-no-files-found: error
          retention-days: 1

  build_cli:
    name: Build CLI
    needs:
      - test
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install
      - name: Build CLI bundle
        run: yarn run build:cli
      - name: Upload CLI bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-release-asset
          path: packages/apps/cli/build/bundle.js
          if-no-files-found: error
          retention-days: 1

  # SOURCE: https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  build_and_push_image:
    name: Publish docker image
    runs-on: ubuntu-latest
    needs:
      - test
      - build_cli
    #   - build_zsh_plugin
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-cli
      DOCKERFILE: ./docker/cli.Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  publish_release:
    name: Publish release
    needs:
      - build_cli
      - build_zsh_plugin
      - build_and_push_image
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: "*-release-asset"
          merge-multiple: true
      - name: Rename artifacts
        run: |
          mv release-assets/bundle.js release-assets/cli.js
      - if: github.event_name == 'push'
        name: Get tag name
        run: |
          TAG_NAME=${{ github.ref_name }}
          if [[ "$TAG_NAME" = "${{ github.event.repository.default_branch }}" ]]; then
            TAG_NAME=next
          fi
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
      - if: github.event_name == 'push'
        name: Check for prerelease pattern
        run: |
          prerelease_version_tag_pattern='^(next|v[0-9]+\\.[0-9]+\\.[0-9]+\\.-.*)$'
          if [[ "$TAG_NAME" =~ $prerelease_version_tag_pattern ]]; then
            echo 'PRERELEASE=--prerelease' >> $GITHUB_ENV
          fi
      - if: env.TAG_NAME == 'next'
        name: Delete 'next' prerelease
        run: |
          gh release delete "$TAG_NAME" --yes || true
      - if: env.TAG_NAME == 'next'
        name: Update git tag 'next'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.TAG_NAME }}',
              sha: context.sha
            }).catch(err => {
              if (err.status !== 422) throw err;
              github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ env.TAG_NAME }}',
                sha: context.sha
              });
            })
      - name: Create release
        run: |
          release_tag="${TAG_NAME:-$(git rev-parse --short "$GITHUB_SHA")}"
          release_target="$GITHUB_SHA"
          release_title="llm-tools CLI - $TAG_NAME"
          if [[ -n "$PRERELEASE" ]]; then
            release_title="${release_title} (prerelease)"
          fi
          # NOTE: see https://cli.github.com/manual/gh_release_create
          gh release create \
            "$release_tag" \
            $PRERELEASE \
            --target "$release_target" \
            --title "$release_title" \
            release-assets/*
