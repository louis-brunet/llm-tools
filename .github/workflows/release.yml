name: release
on:
  push:
    branches:
      - main

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['22.14']
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test
        with:
          node-version: ${{ matrix.node-version }}
          workspace-from: 'packages/apps/*'

  build_zsh_plugin:
    name: Build zsh plugin
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - working-directory: examples/zsh
        run: tar -czvf zsh-plugin.tgz llm-tools
      - uses: actions/upload-artifact@v4
        with:
          name: zsh-plugin-artifact
          path: examples/zsh/zsh-plugin.tgz
          if-no-files-found: error
          retention-days: 1

  build_cli:
    name: Build CLI
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install
      - run: yarn run build:cli
      - run: yarn run bundle:cli
      - uses: actions/upload-artifact@v4
        with:
          name: cli-artifact
          path: packages/apps/cli/build/bundle.js
          if-no-files-found: error
          retention-days: 1

  # SOURCE: https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  build_and_push_image:
    runs-on: ubuntu-latest
    needs:
      - build_cli
      - build_zsh_plugin
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      DOCKERFILE: ./docker/cli.Dockerfile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # SOURCE: https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-a-registry-using-a-personal-access-token
  # # This pushes the image to GitHub Packages.
  # push_docker_image:
  #   name: Push Docker image
  #   needs:
  #     - build_cli
  #     - build_zsh_plugin
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #     contents: read
  #   env:
  #     IMAGE_NAME: llm-tools-cli
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Build image
  #       run: docker build . --file docker/cli.Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
  #
  #     - name: Log in to registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #
  #     - name: Push image
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
  #
  #         # This changes all uppercase characters to lowercase.
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # This strips the git ref prefix from the version.
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # This strips the "v" prefix from the tag name.
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # This uses the Docker `latest` tag convention.
  #         [ "$VERSION" == "main" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

  publish_release:
    name: Publish release
    needs:
      - build_cli
      - build_zsh_plugin
      - build_and_push_image
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v4
      - name: Rename artifacts
        run: |
          mv cli-artifact/bundle.js cli-artifact/cli.js
      - name: Create GitHub release
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_tag="$(git rev-parse --short "$GITHUB_SHA")"
          release_target="$GITHUB_SHA"
          release_title="CLI - $GITHUB_SHA"
          gh release create \
            "$release_tag" \
            --target "$release_target" \
            --title "$release_title" \
            --prerelease \
            cli-artifact/cli.js \
            zsh-plugin-artifact/zsh-plugin.tgz
